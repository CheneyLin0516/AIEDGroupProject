import os
from crewai import Agent, Task, Crew, Process
from langchain_groq.chat_models import ChatGroq
import chainlit as cl
from crewai_tools import PDFSearchTool
from chainlit import make_async
from crewai_tools import tool

llm = ChatGroq(model_name="groq/llama3-70b-8192")

@tool("Ask Human the question")
def ask_human(question: str) -> str:
    """Ask the question to the human user"""
    human_response  = run_sync( cl.AskUserMessage(content=f"{question}",author="Teacher").send())
    cl.Message(content=human_response).send()
    if human_response:
        return human_response["output"]

def setup_rag_tool(pdf_path):
    """Initialize RAG tool with the provided PDF"""
    return PDFSearchTool(
        pdf=pdf_path,
        config=dict(
            llm=dict(
                provider="groq",
                config=dict(
                    base_url="https://api.groq.com/openai/v1",
                    api_key=os.environ['GROQ_API_KEY'],
                    model="groq/mixtral-8x7b-32768"
                ),
            ),
            embedder=dict(
                provider="huggingface",
                config=dict(
                    model="BAAI/bge-small-en-v1.5",
                ),
            ),
        )
    )
@cl.on_chat_start
async def on_chat_start():
    """Initialize the chat session"""
    await cl.Message(
        content="# Welcome to PrepMaster! :rocket::robot_face:\nHere, you will be helped by a team of virtual experts to better prepare for the weekly course."
    ).send()
    
    # Ask for PDF upload
    files = await cl.AskFileMessage(
        content="Please upload your weekly learning materials",
        accept=["application/pdf"],
        max_size_mb=20,
    ).send()
    
    # Initialize learning session
    print("Files:", files)
    rag_tool = setup_rag_tool(files[0].path)
    
    # Agents
    learning_content_analyst= Agent(
                role='LearningContentAnalyst',
                goal='Analyze content from the uploaded PDF and generate a summary.',
                backstory="You are an expert in educational content analysis with a deep understanding of academic materials. Your role is to distill complex readings into actionable summaries that highlight the weekly objectives, essential keywords, and core concepts.",
                tools=[rag_tool],
                llm=llm
            )
    question_generator = Agent(
                role='QuestionGenerator',
                goal='Create thought-provoking questions for both the pre-test and post-test sessions to assess and enhance the student’s understanding of the weekly learning material.',
                backstory="You excel in crafting questions that encourage critical thinking and reflection. You design three targeted pre-test questions to gauge baseline knowledge and three post-test questions that require students to explain main ideas in their own words, aligned with the weekly objectives.",
                tools=[],
                llm=llm
            )
    questioner = Agent(
                role='Questioner',
                goal="Ask the human question one by one.",
                backstory="You like to ask human questions one by one.",
                tools=[ask_human],
                llm=llm
    )
    evaluator = Agent(
                role='Evaluator',
                goal='Assess student responses to both pre-test and post-test questions and provide constructive feedback.',
                backstory="You specialize in evaluating student learning with a focus on clarity, accuracy, and encouragement. Your role is to provide feedback that highlights what the student has understood well and areas where further improvement is needed, ensuring a supportive tone.",
                tools=[],
                llm=llm
            )
    facilitator = Agent(
                role='Facilitator',
                goal='Guide the student through a personalized learning session to deepen understanding of the weekly material.',
                backstory="You are an expert in facilitating engaging and interactive learning experiences. You craft three explanations and activities based on the pre-test evaluation to address gaps in understanding while reinforcing strengths, using a positive and approachable tone.",
                tools=[],
                llm=llm
        )
    summary_expert = Agent(
                role='SummaryExpert',
                goal='Generate a comprehensive summary of the student’s learning experience, including strengths, weaknesses, learning progress, and recommendations for improvement.',
                backstory="You're an expert in summarizing the conversation history between the student and the AI agents regarding student's strength, weakness, learning path, and ways for improvement.",
                tools=[],
                llm=llm
            )
    
    # Tasks
    learning_content_analysis = Task( #crew 1
                description="Analyze the weekly learning materials and generate a summary focusing on weekly objectives, key terms, and main ideas.",
                expected_output="A concise summary highlighting weekly objectives, essential keywords, and main ideas from the learning materials.",
                agent=learning_content_analyst
            )
    question_generation =Task( #crew 2
                description="Generate three questions for the pre-test session based on the summary provided by the LearningContentAnalyst.",
                expected_output="A message saying 'Here are three pre-test questions for you.' And a set of three thought-provoking pre-test questions designed to assess the student’s baseline knowledge.",
                agent=question_generator
            )
    question_asking = Task( #crew 2
                description="Sequentially ask the pre-test questions to the human, one question at a time. Record the human response to each question before moving on to the next.",
                expected_output="A report containing the pre-test questions and the student’s individual responses.",
                agent=questioner,
                tools=[ask_human]
            )
    evaluation = Task( #crew 3
                description="Evaluate the pre-test session report and provide feedback on the student’s baseline knowledge for the Facilitator.",
                expected_output="A pre-test evaluation report summarizing the student’s understanding, including strengths and areas for improvement.",
                agent=evaluator
            )
    facilitation = Task( #crew 3
                description="Analyze the pre-test evaluation report, design a tailored learning session, and guide the student through key points with opportunities for interaction.",
                expected_output="A learning session report detailing the key concepts and explanations provided to the student.",
                agent=facilitator
            )
    post_question_generation = Task( #crew 4
                description="Sequentially present the post-test questions to the student, one question at a time. Record the student’s response to each question before moving on to the next.",
                expected_output="A message saying 'Here are three post-test questions for you.' And a set of three post-test questions designed to evaluate the student’s grasp of key concepts.",
                agent=question_generator
            )
    post_question_asking =Task( #crew 4
                description="Ask the student the post-test questions, and one question at a time.",
                expected_output="A report containing the post-test questions and the student’s individual responses.",
                agent=question_generator
            )
    post_evaluation=Task( #crew 5
                description="Evaluate the post-test session report and summarize the student’s progress and understanding for the SummaryExpert.",
                expected_output="A post-test evaluation report highlighting strengths, areas needing reinforcement, and learning progress.",
                agent=evaluator
            )
    summary=Task( #crew 5
                description="Synthesize the interaction history and post-test evaluation report to generate a final learning summary for the student.",
                expected_output="A detailed learning summary that includes the student’s strengths, weaknesses, learning path, and recommendations for improvement.",
                agent=summary_expert
            )
    
    # Crews
    analysis_crew = Crew(
                agents=[learning_content_analyst],
                tasks=[learning_content_analysis],
                verbose=True,
                process= Process.sequential,
            )
    pretest_crew= Crew(
                agents=[question_generator, questioner],
                tasks=[question_generation, question_asking],
                process=Process.sequential
            )
    pretest_generation_crew= Crew(
                agents=[question_generator],
                tasks=[question_generation],
                process=Process.sequential
            )
    pretest_asking_crew= Crew(
                agents=[questioner],
                tasks=[question_asking],
                process=Process.sequential
            )
    evaluation_facilitation_crew = Crew(
                agents=[evaluator, facilitator],
                tasks=[evaluation, facilitation],
                process=Process.sequential
            )
    posttest_crew = Crew(
                agents=[question_generator, questioner],
                tasks=[post_question_generation, post_question_asking],
                process=Process.sequential
            )
    summary_crew = Crew(
                agents=[evaluator, summary_expert],
                tasks=[post_evaluation, summary],
                process=Process.sequential
            )
    
    # User sessions 
    cl.user_session.set('analysis_crew', analysis_crew)
    cl.user_session.set('pretest_crew', pretest_crew)
    cl.user_session.set('evaluation_facilitation_crew', evaluation_facilitation_crew)
    cl.user_session.set('posttest_crew', posttest_crew)
    cl.user_session.set('summary_crew', summary_crew)
    cl.user_session.set('phase', "analysis")
    await cl.Message(content=f"Tell me to start", author="Crew").send()

@cl.on_message
async def main(message: cl.Message):
    if(cl.user_session.get("phase")=="analysis"):
        crew = cl.user_session.get('analysis_crew')
        question = message.content              # what's this for? 
        crew_call = make_async(crew.kickoff)
        crew_output = await crew_call()
        print (crew_output)
        for output in crew_output.tasks_output:
            msg = cl.Message(content=output.raw,author=output.agent)
            await msg.send()
            await msg.update()
        cl.user_session.set("phase", "pretest")
    elif(cl.user_session.get("phase")=="pretest"):
        crew = cl.user_session.get('pretest_crew')
        question = message.content
        crew_call = make_async(crew.kickoff)
        #crew_output = await crew_call()
        crew_output = crew.kickoff()
        for output in crew_output.tasks_output:
            msg = cl.Message(content=output.raw,author=output.agent)
            await msg.send()
            await msg.update()
        cl.user_session.set("phase", "evaluation_facilitation")
    elif(cl.user_session.get("phase")=="evaluation_facilitation"):
        crew = cl.user_session.get('evaluation_facilitation_crew')
        question = message.content
        crew_call = make_async(crew.kickoff)
        crew_output = await crew_call()
        for output in crew_output.tasks_output:
            msg = cl.Message(content=output.raw,author=output.agent)
            await msg.send()
            await msg.update()
        cl.user_session.set("phase", "posttest")
    elif(cl.user_session.get("phase")=="posttest"):
        crew = cl.user_session.get('posttest_crew')
        question = message.content
        crew_call = make_async(crew.kickoff)
        crew_output = await crew_call()
        for output in crew_output.tasks_output:
            msg = cl.Message(content=output.raw,author=output.agent)
            await msg.send()
            await msg.update()
        cl.user_session.set("phase", "summary")
    elif(cl.user_session.get("phase")=="summary"):
        crew = cl.user_session.get('summary_crew')
        question = message.content
        crew_call = make_async(crew.kickoff)
        crew_output = await crew_call()
        for output in crew_output.tasks_output:
            msg = cl.Message(content=output.raw,author=output.agent)
            await msg.send()
            await msg.update()
        await cl.Message(content="The learning session is complete. Feel free to add the Summary to your weekly note. Enjoy the coming class!").send() 





